steps:

- script: |
    wget https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-2.4.2.tar.gz
    tar -zxvf mpdecimal-2.4.2.tar.gz
    git clone -b $(konga_branch) https://$(user):$(password)@github.com/easybyte-software/konga.git
  displayName: 'Download dependencies (Unix)'
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Windows_NT'))

- script: |
    brew install zlib pcre
  displayName: 'Download dependencies (macOS)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

- script: |
    if "$(python.version)"=="2.7" ( choco install vcpython27 --yes )
    python -c "from urllib.request import urlretrieve; urlretrieve('https://github.com/lexxmark/winflexbison/releases/download/v2.5.24/win_flex_bison-2.5.24.zip', 'win_flex_bison-2.5.24.zip')"
    7z x win_flex_bison-2.5.24.zip
    python -c "from urllib.request import urlretrieve; urlretrieve('https://www.bytereef.org/software/mpdecimal/releases/mpdecimal-2.4.2.zip', 'mpdecimal-2.4.2.zip')"
    7z x mpdecimal-2.4.2.zip
    python -c "from urllib.request import urlretrieve; urlretrieve('https://zlib.net/zlib-1.2.11.tar.gz', 'zlib-1.2.11.tar.gz')"
    7z x zlib-1.2.11.tar.gz -so | 7z x -aoa -si -ttar
    python -c "from urllib.request import urlretrieve; urlretrieve('https://ftp.pcre.org/pub/pcre/pcre-8.31.zip', 'pcre-8.31.zip')"
    7z x pcre-8.31.zip
    git clone -b $(konga_branch) https://$(user):$(password)@github.com/easybyte-software/konga.git
    del /q konga\doc\technical\kongalib
    del /q konga\doc\_static\kongalib
    del /q konga\doc\_static\slew
  displayName: 'Download dependencies (Windows)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- script: |
    export KONGALIB_ROOT=`pwd`
    tar -zxvf mpdecimal-2.4.2.tar.gz
    cd mpdecimal-2.4.2
    ./configure
    CFLAGS=-fPIC make -j2
    sudo make install
    cd ..
    cd konga
    mkdir -p out
    cd out
    cmake .. -DOPT_USE_CPP11=1 -DOPT_NO_SSL=1 -DOPT_KONGALIB_WHEEL=1 -DCMAKE_PREFIX_PATH=/usr/local
    if [ "$(verbose)" != "true" ]; then make -j2; fi
    if [ "$(verbose)" == "true" ]; then make VERBOSE=1; fi
    sudo make install
  displayName: 'Install C dependencies (macOS)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin'))

- task: BatchScript@1
  inputs:
    filename: .azure-pipelines\build-deps.bat
    workingFolder: azure-pipelines
  displayName: 'Install C dependencies (Windows)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))


- script: ./macos-install-python.sh '$(python.version)'
  workingDirectory: .azure-pipelines
  displayName: Install Python.org Python
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Darwin')) 

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(python.version)'
    architecture: '$(python.architecture)'
  condition: and(succeeded(), eq(variables['Agent.OS'], 'Windows_NT'))

- script: |
    mkdir -p dist
    python -m pip install --upgrade pip
    python -m pip install --upgrade wheel twine setuptools
  displayName: 'Install Python dependencies'
  condition: and(succeeded(), ne(variables['Agent.OS'], 'Linux'))

